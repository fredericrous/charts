name: Helm Chart Testing

on:
  pull_request:
    branches:
      - main
    paths:
      - 'charts/**'
      - '!charts/**/README.md'
      - '.github/workflows/helm-*.yaml'
      - '.github/ct.yaml'
  push:
    branches:
      - main
    paths:
      - 'charts/**'
      - '!charts/**/README.md'
      - '!**/crds/**'
      - '.github/workflows/helm-*.yaml'

jobs:
  lint-and-test:
    name: Lint and Test Charts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.13.3'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.1

      - name: List changed charts
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }} --config .github/ct.yaml)
          if [[ -n "$changed" ]]; then
            echo "Changed charts:"
            echo "$changed"
            echo "changed=true" >> $GITHUB_OUTPUT
            # Save changed charts to file for later use
            echo "$changed" > /tmp/changed-charts.txt
          else
            echo "No chart changes detected"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Lint changed charts
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          ct lint --target-branch ${{ github.event.repository.default_branch }} \
            --validate-maintainers=false \
            --check-version-increment=false \
            --config .github/ct.yaml

      - name: Create test values for changed charts
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          # For each changed chart, create a minimal test values file if needed
          while IFS= read -r chart; do
            if [[ -n "$chart" ]]; then
              echo "Processing chart: $chart"
              
              # Create ci directory if it doesn't exist
              mkdir -p "$chart/ci"
              
              # Create a minimal test values file if it doesn't exist
              if [ ! -f "$chart/ci/test-values.yaml" ]; then
                cat > "$chart/ci/test-values.yaml" << EOF
# Minimal test values for CI
replicaCount: 1

resources:
  requests:
    memory: "64Mi"
    cpu: "10m"
  limits:
    memory: "128Mi"
    cpu: "100m"

# Disable features that require external dependencies
serviceMonitor:
  enabled: false
  
networkPolicy:
  enabled: false
EOF
              fi
            fi
          done < /tmp/changed-charts.txt

      - name: Create kind cluster
        if: steps.list-changed.outputs.changed == 'true'
        uses: helm/kind-action@v1.10.0
        with:
          config: |
            kind: Cluster
            apiVersion: kind.x-k8s.io/v1alpha4
            nodes:
            - role: control-plane
              image: kindest/node:v1.29.2

      - name: Install CRDs for changed charts
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          while IFS= read -r chart; do
            if [[ -n "$chart" ]] && [ -d "$chart/crds" ] && [ "$(ls -A $chart/crds)" ]; then
              echo "Installing CRDs for $chart"
              kubectl apply -f "$chart/crds/"
            fi
          done < /tmp/changed-charts.txt
          
          # Wait for CRDs to be established
          sleep 5

      - name: Run chart-testing (install)
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          ct install \
            --target-branch ${{ github.event.repository.default_branch }} \
            --config .github/ct.yaml \
            --helm-extra-args "--timeout=5m"

      - name: Collect logs on failure
        if: failure()
        run: |
          echo "=== Nodes ==="
          kubectl get nodes -o wide
          
          echo -e "\n=== Pods (all namespaces) ==="
          kubectl get pods -A -o wide
          
          echo -e "\n=== Events (all namespaces) ==="
          kubectl get events -A --sort-by='.lastTimestamp'
          
          echo -e "\n=== Describe failed pods ==="
          kubectl get pods -A --field-selector=status.phase!=Running,status.phase!=Succeeded -o json | \
            jq -r '.items[] | "\(.metadata.namespace)/\(.metadata.name)"' | \
            xargs -I {} sh -c 'echo "=== Pod: {} ==="; kubectl describe pod -n $(echo {} | cut -d/ -f1) $(echo {} | cut -d/ -f2)'
          
          echo -e "\n=== Logs from failed pods ==="
          kubectl get pods -A --field-selector=status.phase!=Running,status.phase!=Succeeded -o json | \
            jq -r '.items[] | "\(.metadata.namespace)/\(.metadata.name)"' | \
            xargs -I {} sh -c 'echo "=== Logs: {} ==="; kubectl logs -n $(echo {} | cut -d/ -f1) $(echo {} | cut -d/ -f2) --tail=50 || true'