name: Test Helm Charts

on:
  pull_request:
    paths:
      - '**/Chart.yaml'
      - '**/values.yaml'
      - '**/templates/**'
      - '**/crds/**'
      - '.github/workflows/helm-*.yaml'
  push:
    branches:
      - main
    paths:
      - '**/Chart.yaml'
      - '**/values.yaml'
      - '**/templates/**'
      - '**/crds/**'
      - '.github/workflows/helm-*.yaml'

jobs:
  list-changed:
    name: List Changed Charts
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      changed: ${{ steps.set-matrix.outputs.changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.13.3'

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.1

      - name: List changed charts
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }} --config .github/ct.yaml)
          if [[ -n "$changed" ]]; then
            echo "Changed charts:"
            echo "$changed"
            # Convert to JSON array and prepend charts/ directory
            charts_json=$(echo "$changed" | sed 's|^|charts/|' | jq -R -s -c 'split("\n")[:-1]')
            echo "charts=$charts_json" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No chart changes detected"
            echo "charts=[]" >> $GITHUB_OUTPUT
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Set matrix
        id: set-matrix
        run: |
          if [[ "${{ steps.list-changed.outputs.has_changes }}" == "true" ]]; then
            echo "matrix={\"chart\":${{ steps.list-changed.outputs.charts }}}" >> $GITHUB_OUTPUT
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"chart\":[]}" >> $GITHUB_OUTPUT
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  lint-and-test:
    name: Lint and Test Chart
    needs: list-changed
    if: needs.list-changed.outputs.changed == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.list-changed.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.13.3'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.1

      - name: Lint chart
        run: |
          ct lint --charts charts/$(basename ${{ matrix.chart }}) \
            --validate-maintainers=false \
            --check-version-increment=false

      - name: Check documentation
        run: |
          # Ensure README exists
          if [ ! -f "${{ matrix.chart }}/README.md" ]; then
            echo "ERROR: README.md is missing in chart directory"
            exit 1
          fi
          
          # Check for required sections in README
          for section in "Prerequisites" "Installing" "Configuration" "Uninstalling"; do
            if ! grep -q "## $section" ${{ matrix.chart }}/README.md; then
              echo "WARNING: README.md is missing section: ## $section"
            fi
          done

      - name: Validate values schema
        run: |
          # Install yamllint
          pip install yamllint
          
          # Lint values.yaml
          yamllint -c .github/yamllint.yaml ${{ matrix.chart }}/values.yaml || true

      - name: Security scan with Kubesec
        run: |
          # Install kubesec
          curl -sSL https://github.com/controlplaneio/kubesec/releases/download/v2.14.0/kubesec_linux_amd64.tar.gz | tar xz
          sudo mv kubesec /usr/local/bin
          
          # Template and scan
          helm template test ${{ matrix.chart }} > /tmp/manifests.yaml
          
          # Split manifests and scan each
          csplit -f /tmp/manifest- -b %03d.yaml /tmp/manifests.yaml '/^---$/' '{*}' 2>/dev/null || true
          
          for file in /tmp/manifest-*.yaml; do
            if [ -f "$file" ] && grep -q "kind: Deployment\|kind: DaemonSet\|kind: StatefulSet\|kind: Job\|kind: CronJob" "$file"; then
              echo "Scanning $file..."
              kubesec scan "$file" || true
            fi
          done

      - name: Test templating with different values
        run: |
          CHART_NAME=$(basename ${{ matrix.chart }})
          
          # Always test default values
          echo "Testing default values..."
          helm template test-default ${{ matrix.chart }} > /tmp/test-default.yaml
          echo "✅ Default values templated successfully"
          
          # Test common configurations if they exist in values.yaml
          if grep -q "replicaCount:" ${{ matrix.chart }}/values.yaml; then
            echo "Testing HA configuration..."
            helm template test-ha ${{ matrix.chart }} --set replicaCount=3 > /tmp/test-ha.yaml
            echo "✅ HA configuration templated successfully"
          fi
          
          if grep -q "serviceMonitor:" ${{ matrix.chart }}/values.yaml; then
            echo "Testing monitoring configuration..."
            helm template test-monitoring ${{ matrix.chart }} --set serviceMonitor.enabled=true > /tmp/test-monitoring.yaml
            echo "✅ Monitoring configuration templated successfully"
          fi
          
          if grep -q "networkPolicy:" ${{ matrix.chart }}/values.yaml; then
            echo "Testing network policy configuration..."
            helm template test-netpol ${{ matrix.chart }} --set networkPolicy.enabled=true > /tmp/test-netpol.yaml
            echo "✅ Network policy configuration templated successfully"
          fi

  test-install:
    name: Test Chart Installation
    needs: [list-changed, lint-and-test]
    if: needs.list-changed.outputs.changed == 'true' && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chart: ${{ fromJson(needs.list-changed.outputs.matrix).chart }}
        k8s-version:
          - v1.28.0
          - v1.29.0
          - v1.30.0
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.13.3'

      - name: Create kind cluster
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: kind
          node_image: kindest/node:${{ matrix.k8s-version }}

      - name: Check if cert-manager is needed
        id: check-cert-manager
        run: |
          if grep -q "cert-manager.io" ${{ matrix.chart }}/templates/* 2>/dev/null || \
             grep -q "webhook" ${{ matrix.chart }}/values.yaml 2>/dev/null; then
            echo "needed=true" >> $GITHUB_OUTPUT
          else
            echo "needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Install cert-manager
        if: steps.check-cert-manager.outputs.needed == 'true'
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.3/cert-manager.yaml
          kubectl wait --for=condition=Available --timeout=300s deployment/cert-manager -n cert-manager
          kubectl wait --for=condition=Available --timeout=300s deployment/cert-manager-webhook -n cert-manager
          kubectl wait --for=condition=Available --timeout=300s deployment/cert-manager-cainjector -n cert-manager

      - name: Install CRDs
        run: |
          if [ -d "${{ matrix.chart }}/crds" ] && [ "$(ls -A ${{ matrix.chart }}/crds)" ]; then
            kubectl apply -f ${{ matrix.chart }}/crds/
            sleep 5
          fi

      - name: Test chart installation - default values
        run: |
          CHART_NAME=$(basename ${{ matrix.chart }})
          helm install test-$CHART_NAME ${{ matrix.chart }} \
            --namespace default \
            --wait \
            --timeout 5m \
            --debug

      - name: Verify installation
        run: |
          CHART_NAME=$(basename ${{ matrix.chart }})
          
          # Check deployments/statefulsets/daemonsets
          kubectl get deploy,sts,ds -l "app.kubernetes.io/name=$CHART_NAME" -o wide
          
          # Check pods
          kubectl get pods -l "app.kubernetes.io/name=$CHART_NAME"
          
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l "app.kubernetes.io/name=$CHART_NAME" --timeout=120s || true
          
          # Check services
          kubectl get svc -l "app.kubernetes.io/name=$CHART_NAME"

      - name: Test chart upgrade
        run: |
          CHART_NAME=$(basename ${{ matrix.chart }})
          
          # Perform upgrade with a simple change
          helm upgrade test-$CHART_NAME ${{ matrix.chart }} \
            --namespace default \
            --wait \
            --timeout 5m \
            --set podAnnotations.upgraded=true

      - name: Test chart uninstall
        run: |
          CHART_NAME=$(basename ${{ matrix.chart }})
          helm uninstall test-$CHART_NAME --namespace default --wait

      - name: Verify uninstall
        run: |
          CHART_NAME=$(basename ${{ matrix.chart }})
          
          # Check that resources are removed (except CRDs)
          if kubectl get deploy,sts,ds,svc -l "app.kubernetes.io/name=$CHART_NAME" 2>/dev/null | grep -v "No resources found"; then
            echo "ERROR: Resources still exist after uninstall"
            exit 1
          fi

      - name: Collect logs on failure
        if: failure()
        run: |
          CHART_NAME=$(basename ${{ matrix.chart }})
          
          echo "=== Nodes ==="
          kubectl get nodes -o wide
          
          echo "=== Namespaces ==="
          kubectl get namespaces
          
          echo "=== All resources ==="
          kubectl get all -A
          
          echo "=== Events ==="
          kubectl get events -A --sort-by='.lastTimestamp' | tail -50
          
          echo "=== Chart logs ==="
          kubectl logs -l "app.kubernetes.io/name=$CHART_NAME" --all-containers=true --tail=100 || true
          
          echo "=== Describe pods ==="
          kubectl describe pods -l "app.kubernetes.io/name=$CHART_NAME" || true

  # Summary job to use as required status check
  test-summary:
    name: Tests Summary
    needs: [list-changed, lint-and-test, test-install]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Summary
        run: |
          if [[ "${{ needs.list-changed.outputs.changed }}" != "true" ]]; then
            echo "No chart changes detected - skipping tests"
            exit 0
          fi
          
          if [[ "${{ needs.lint-and-test.result }}" != "success" ]] || [[ "${{ needs.test-install.result }}" != "success" ]]; then
            echo "Tests failed!"
            exit 1
          fi
          
          echo "All tests passed!"